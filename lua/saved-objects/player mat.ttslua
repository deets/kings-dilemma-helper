#include kd/util.ttslua
#include kd/common.ttslua

house_name = nil
my_player = nil

secret_area_position = Vector(0, 0, 0.22)
secret_area_size = Vector(1.0, 0.5, 0)
influence_marker_location = Vector(0.325, 0, 0.16)
money_location = Vector(-0.325, 0, 0.16)

yes_position_offset = Vector(0.325, 3, -0.325)
no_position_offset = Vector(-0.325, 3, -0.325)
pass_position_offset = Vector(0, 3, -0.25)
hammer_location = pass_position_offset + Vector(0, 3, -0.43)
card_size = Vector(0.3, 0.45, 0)
placement_offset_position = Vector(0, 3, 0)

function set_player_visibility(player)
   if HIDE_CONTROLS_FOR_OTHER_PLAYERS then
      self.UI.setAttribute("container", "visibility", player.color)
   end
end

function move_vote(position_offset)
    local ims = refineTableBy(upCast(self, 10, secret_area_position, secret_area_size),  filter_influence_markers)
    local position = relative_to_me(self, position_offset)
    for _, v in ipairs(ims) do
        local takeParams = {
            position = position
        }
        local taken = v.takeObject(takeParams)
        if taken == nil then
            -- we did not take so it was not a stack. Move the object instead
            v.setPositionSmooth(position, false, false)
        end
        break
    end
end

function vote(player, direction)
   set_player_visibility(player)
   local position = nil
   if direction == "yes" then
      position = yes_position_offset
   elseif direction == "no" then
      position = no_position_offset
   end
   move_vote(position)
   after(1.0, function() get_playingfield().call("count_votes") end)
end

function place_money(offset)
    local position = relative_to_me(self, offset)
    local money_bag = get_money_bag()
    local takeParams = {
        position = position
    }
    local taken = money_bag.takeObject(takeParams)
end

function pass_for(player, kind)
    set_player_visibility(player)
    if voted_for_power() or voted_for_arbitration() then
        return
    end
    if kind == "power" then
       place_money(pass_position_offset)
    elseif kind == "arbitration" then
       if can_pass_for_arbitration() and not voted_for_power() then
          local hammer = get_arbitration_hammer()
          hammer.setPositionSmooth(relative_to_me(self, hammer_location))
          place_money(hammer_location + STACKING)
       end
    end
end


function voted_for_arbitration()
    local money = refineTableBy(upCast(self, 10, pass_position_offset * 2.3 * Vector(1, 0, 1), card_size * 0.7),  filter_money_markers)
    if sum_value(money) > 0 then
        return true
    else
        return false
    end
end

function voted_for_power()
    local money = refineTableBy(upCast(self, 10, pass_position_offset * Vector(1, 0, 1), card_size),  filter_money_markers)
    if sum_value(money) > 0 then
        return true
    else
        return false
    end
end

function collect_voting_items(position)
   local items = upCast(self, 10, position * Vector(1, 0, 1), card_size)
   local votes = refineTableBy(
      items,
      filter_money_or_influence
   )
   return votes
end

function count_votes(position)
   return sum_value(collect_voting_items(position))
end


function collect_votes(params)
    local vote = params.vote
    local position = params.position
    local position_offset = nil
    local losing_offset = nil
    if vote == "yes" then
        winning_offset = yes_position_offset
        losing_offset = no_position_offset
    else
        winning_offset = no_position_offset
        losing_offset = yes_position_offset
    end
    -- transfer our winning influence markers
    local ims = collect_voting_items(winning_offset)
    for _, marker in pairs(ims) do
       local real_position = position
       if marker.getName() == "money" then
          real_position = get_money_bag().getPosition() + STACKING * 4
       end
       if marker.getQuantity() > -1 then
          for i = 1, marker.getQuantity() do
             local tp = {
                position = Vector(real_position),
             }
             marker.takeObject(tp)
             real_position = real_position + STACKING
             position = position + STACKING
          end
       end
       marker.setPositionSmooth(real_position)
       position = position + STACKING
    end

    -- transfer the losing markers back into the stash
    ims = collect_voting_items(losing_offset)
    local losing_position = relative_to_me(self, influence_marker_location) + STACKING
    for _, marker in pairs(ims) do
       local real_position = losing_position
       if marker.getName() == "money" then
          real_position = relative_to_me(self, money_location) + STACKING
       end

       if marker.getQuantity() > -1 then
          for i = 1, marker.getQuantity() do
             local tp = {
                position = Vector(real_position),
             }
             marker.takeObject(tp)
             real_position = real_position + STACKING
             losing_position = losing_position + STACKING
            end
        end
        marker.setPositionSmooth(real_position)
        losing_position = losing_position + STACKING
    end
    return position
end

function influence_placement_position(params)
    local ims_count = sum_value(refineTableBy(upCast(self, 10, secret_area_position * Vector(1, 0, 1), secret_area_size),  filter_influence_markers))
    local total = ims_count + params.gain
    if my_player then
        my_player.broadcast("You should have " .. total .. " influence")
    end
    return relative_to_me(self, influence_marker_location)
end

function collect_pass_money()
    local money = refineTableBy(upCast(self, 10, pass_position_offset * 2 * Vector(1, 0, 1), card_size * 2),  filter_money_markers)
    log(#money, "collect_pass_money")
    local dest = relative_to_me(self, money_location) + STACKING
    for _, coin in pairs(money) do
        coin.setPositionSmooth(dest)
        dest = dest + STACKING
    end
end

function voting_state()
   local res = { yes=0, no=0, pass=nil, mat=self.getGUID() }

   if voted_for_power() then
      res.pass = "power"
   elseif voted_for_arbitration() then
      res.pass = "arbitration"
   end

   res.yes = count_votes(yes_position_offset)
   res.no = count_votes(no_position_offset)

   log(res, "voting state")
   return res
end
