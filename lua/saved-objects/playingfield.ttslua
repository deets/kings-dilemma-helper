#include kd/util.ttslua
#include kd/common.ttslua

VOTE_COUNT_PERIOD = 5

voting_area_location = Vector(0, 0, 0.42)
voting_area_extend = Vector(1, 0.15, 0)
leftover_drop_off = Vector(0.4, 0.0, 0.42)

function influence_markers_in_voting_area()
   return refineTableBy(
      upCast(self, 10, voting_area_location, voting_area_extend),
      filter_influence_markers
   )
end

function get_pass_for_power_guids()
   local pms = get_all_player_mats()
   local pass_for_power = {}
   for _, player_mat in pairs(pms) do
      local g = player_mat.getGUID()
      if player_mat.call("voted_for_power", {}) then
         table.insert(pass_for_power, g)
      end
   end
   return pass_for_power
end

function resolve_coro()
   log("resolve_coro")
   local ims = influence_markers_in_voting_area()
   if #ims > 0 then
      group(ims)
      for i=1,100 do
         coroutine.yield(0)
         ims = influence_markers_in_voting_area()
         log(#ims, "frame:" .. i)
         if #ims == 1 then
            log("let me break free")
            break
         end
      end
   end
   if #ims == 1 then
      _, stack = next(influence_markers_in_voting_area())
      local im_count = stack.getQuantity()
      local pass_for_power = get_pass_for_power_guids()
      local leftover = im_count % #pass_for_power
      log(leftover, "ims that are left over")
      local lpos = relative_to_me(self, leftover_drop_off) + STACKING
      for i=1,leftover do
         local tp = {
            position = Vector(lpos)
         }
         stack.takeObject(tp)
         coroutine.yield(0)
         lpos = lpos + STACKING_WITH_IM_OFFSET
      end
      -- now we wait until we get the expected number of
      -- ims in total. The leftovers shouldn't be stacked!
      for i=1,100 do
         ims = influence_markers_in_voting_area()
         if #ims == leftover + 1 then
            break
         end
      end
      if #ims == leftover + 1 then
         local player_stacks = stack.split(#pass_for_power)
         log(player_stacks, "player stacks")
         -- just wait a few frames so we are sure we got the split
         for i=1,10 do
            coroutine.yield(0)
         end
         for i, pstack in pairs(player_stacks) do
            log(i, "player number")
            log(pstack, "player stack")
            log(pass_for_power[i], "player mat guid")
            local sigil = getObjectFromGUID(PLAYERMAT_TO_SIGIL[pass_for_power[i]])
            log(sigil, "the player's sigil")
            pstack.setPositionSmooth(sigil.getPosition() + STACKING)
         end
      end
   end

   for _, pm in pairs(get_all_player_mats()) do
      pm.call("collect_pass_money", {})
   end

   local cpos = relative_to_me(self, voting_area_location) + STACKING
   for _, thingamabob in pairs(get_all_player_mats()) do
      cpos = thingamabob.call("collect_votes", { vote=vote, position=cpos  })
   end

   -- must return 1
   log("resolve_coro: done")
   return 1
end

function resolve(_, vote)
   startLuaCoroutine(self, "resolve_coro")
end

function count_votes()
   local yes_votes = 0
   local no_votes = 0
   local pms = get_all_player_mats()
   for _, player_mat in pairs(pms) do
      local voting_state = player_mat.call("voting_state", {})
      yes_votes = yes_votes + voting_state.yes
      no_votes = no_votes + voting_state.no
      local sigil = PLAYERMAT_TO_SIGIL[voting_state.mat]
      if sigil then
         getObjectFromGUID(sigil).call("set_vote_count", voting_state.yes + voting_state.no)
      end
   end
   return { yes_votes=yes_votes, no_votes=no_votes }
end

function display_vote_count()
   local vc  = count_votes()
   self.UI.setValue("yes_vote_count", "" .. vc.yes_votes)
   self.UI.setValue("no_vote_count", "" .. vc.no_votes)
end

function onLoad()
   function periodic_vote_counter()
      display_vote_count()
      after(VOTE_COUNT_PERIOD, periodic_vote_counter)
   end
   after(VOTE_COUNT_PERIOD, periodic_vote_counter)
end
